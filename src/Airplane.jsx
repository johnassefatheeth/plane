/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.2 public/assets/models/airplane.glb 
*/

import React, { useRef,useState } from 'react'
import { useGLTF } from '@react-three/drei'
import { useFrame } from '@react-three/fiber'
import { Matrix4,Vector3,Quaternion } from 'three'
import { updatePlane } from './controls'


const x=new Vector3(1,0,0)
const y=new Vector3(0,1,0)
const z=new Vector3(0,0,1)
export const planePostion =new Vector3(0,2,17)

export function Airplane(props) {
  const { nodes, materials } = useGLTF('assets/models/airplane.glb')
  const groupRef = useRef()
  const helixmeshRef = useRef()
  

  const [velocity, setVelocity] = useState(new Vector3(0, 0, -0.05))
  useFrame(({camera}) => {
    updatePlane(x,y,z,planePostion,camera)
    const rotationMatrix = new Matrix4().makeBasis(x, y, z);


    const planeMatrix = new Matrix4()
    .makeTranslation(planePostion.x, planePostion.y, planePostion.z)
    .multiply(new Matrix4().makeRotationY(groupRef.current.rotation.y)).multiply(rotationMatrix);

  // Apply the plane's transformation to the group
  groupRef.current.matrixAutoUpdate = false;
  groupRef.current.matrix.copy(planeMatrix);
  groupRef.current.matrixWorldNeedsUpdate = true;

//   if (helixmeshRef.current) {
//     helixmeshRef.current.rotation.z += Math.abs(velocity.z) * 20 // Adjust speed multiplier as needed
//   }


// Set up the camera to follow the plane
const cameraOffset = new Vector3(0, 0.08, 0.3)
const cameraPosition = cameraOffset.applyMatrix4(planeMatrix)
camera.position.copy(cameraPosition)
camera.lookAt(planePostion)
camera.matrixWorldNeedsUpdate = true


  })
  return (
    <group ref={groupRef} >
    <group {...props} dispose={null} scale={0.01}  rotation={[0,Math.PI,0]}>
      <mesh geometry={nodes.supports.geometry} material={materials['Material.004']} />
      <mesh geometry={nodes.chassis.geometry} material={materials['Material.005']} />
      <mesh geometry={nodes.helix.geometry} material={materials['Material.005']} ref={helixmeshRef} />
    </group>
    </group>
  )
}

// useGLTF.preload('/airplane.glb')